AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Lambda Function, S3 Bucket for Static File Hosting via CloudFront, and API Gateway

Resources:
  
 
  # S3 Bucket for hosting static content (not configured as website)
  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'static-site-${AWS::Region}-${AWS::AccountId}'
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Origin Access Identity for CloudFront to access the S3 bucket
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'Access S3 bucket ${StaticSiteBucket} from CloudFront'

  # CloudFront distribution for serving static files from S3
  StaticSiteCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt StaticSiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: 
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false  
            Cookies:
              Forward: none     
        DefaultRootObject: index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # Bucket Policy to allow CloudFront to access the S3 bucket
  StaticSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${StaticSiteBucket}/*'

  # API Gateway REST API
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: PromptApi
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: 'Prompt API'
          version: '1.0'
        paths:
          /:
            post:
              summary: 'Invoke Lambda function with a prompt'
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - name: body
                  in: body
                  required: true
                  schema:
                    type: object
                    properties:
                      prompt:
                        type: string
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PromptLambdaFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
              responses:
                '200':
                  description: 'Successful response'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                      default: "'*'"  # Permitir qualquer origem, ou substitua pelo domínio específico
                    Access-Control-Allow-Methods:
                      type: string
                      default: "'POST, OPTIONS'"
                    Access-Control-Allow-Headers:
                      type: string
                      default: "'Content-Type'"
            options:
              summary: 'CORS support'
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 'CORS response'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                      default: "'*'"
                    Access-Control-Allow-Methods:
                      type: string
                      default: "'POST, OPTIONS'"
                    Access-Control-Allow-Headers:
                      type: string
                      default: "'Content-Type'"
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"


  # IAM Role for API Gateway to invoke Lambda function
  ApiGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ApiGatewayInvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt PromptLambdaFunction.Arn

  # Lambda function for handling prompt and AI generation
  PromptLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: gpt
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          GENAI_API_KEY: "YOUR_GOOGLE_API_KEY"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref ApiGateway

Outputs:
  # Output for Lambda Function API Gateway URL
  PromptLambdaFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for the Prompt Lambda Function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/prompt/"
    
  # Output for CloudFront URL to access static files
  StaticSiteCloudFrontURL:
    Description: "CloudFront URL for the static site"
    Value: !Sub "https://${StaticSiteCloudFrontDistribution.DomainName}"
